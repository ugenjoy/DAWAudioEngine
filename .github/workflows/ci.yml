name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            libasound2-dev \
            libjack-jackd2-dev \
            ladspa-sdk \
            libcurl4-openssl-dev \
            libfreetype6-dev \
            libx11-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxext-dev \
            libxinerama-dev \
            libxrandr-dev \
            libxrender-dev \
            libwebkit2gtk-4.1-dev \
            libglu1-mesa-dev \
            mesa-common-dev

      - name: Configure CMake
        run: |
          cd backend
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON

      - name: Build
        run: |
          cd backend/build
          make -j$(nproc)

      - name: Run tests
        run: |
          cd backend/build
          ctest --output-on-failure --verbose

      - name: Upload build artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: daw-audio-engine-${{ matrix.build_type }}
          path: |
            backend/build/DAWAudioEngine_artefacts/
          retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check code formatting
        run: |
          find backend/src backend/include -name '*.cpp' -o -name '*.hpp' | \
            xargs clang-format --dry-run --Werror
        continue-on-error: true

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

      - name: Generate Doxygen documentation
        run: |
          cd backend
          doxygen Doxyfile
          # Disable Jekyll processing for GitHub Pages
          touch docs/html/.nojekyll

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: backend/docs/html/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./backend/docs/html
          publish_branch: gh-pages
          force_orphan: true

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            clang-tidy \
            libasound2-dev \
            libjack-jackd2-dev

      - name: Run clang-tidy
        run: |
          cd backend
          mkdir -p build
          cd build
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cd ..
          find src include -name '*.cpp' -o -name '*.hpp' | \
            xargs clang-tidy -p build
        continue-on-error: true

  release:
    name: Create Release
    needs: [build-and-test, code-quality, documentation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: daw-audio-engine-Release
          path: ./artifacts

      - name: Create Release Tag
        id: create_tag
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          git tag $VERSION
          git push origin $VERSION || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.version }}
          name: Release ${{ steps.create_tag.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
